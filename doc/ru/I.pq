[[[Н‘I/if и E/else’
]]]Н‘Ключевые слова I/if и E/else’


Т‘‘‘#(11l)‘
I <условие>
   ...




’’
‘#(11l)‘
I <условие>
   ...
E
   ...


’’
‘#(11l)‘
I <условие1>
   ...
E I <условие2>
   ...


’’
‘#(11l)‘
I <условие1>
   ...
E I <условие2>
   ...
E
   ...
’’
’’

Два ключевых слова `E`/`else` и `I`/`if` идущие подряд трактуются специальным образом в 11l, благодаря чему отпадает необходимость в специальном/отдельном ключевом слове (как `elif` в Python или `elsif` в Ruby).

Также `I`/`if` и `E`/`else` можно использовать в выражениях в качестве альтернативы тернарному оператору `?:` из языка Си:
#(11l)‘
sign = I x < 0 {-1} E I x > 0 {1} E 0 // 11l
’
#(C)‘
sign =  x < 0 ? -1  :  x > 0 ? 1 : 0; // C
’


Н‘Ключевые подслова I/if’


#(11l)‘
I.likely <условие>
   ...
’
используется, чтобы указать компилятору, что условие в подавляющем большинстве случаев будет выполнено.

И аналогично:
#(11l)‘
I.unlikely <условие>
   ...
’
используется, чтобы указать компилятору, что условие в подавляющем большинстве случаев не будет выполнено.

~‘Примечание: на данный момент увеличение производительности от использования данных подслов слишком незначительно, поэтому их использовать не рекомендуется.’
