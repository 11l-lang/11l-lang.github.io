[[[H‘V/var’
]]]H‘Ключевое слово V/var’


Данное ключевое слово используется для того, чтобы [[[добавить/]]]объявить переменную в текущем блоке кода[[[ области видимости]]]:
#(11l)‘
V variable_name = value
’

Можно объявить группу переменных, инициализированных кортежем:
#(11l)‘
F get_row_column() // функция, возвращающая кортеж
   ...
   R (row, col)
...
V (row, col) = get_row_column() // аналогично такой записи: `V rc = get_row_column(); V row = rc[0]; V col = rc[1]`
’

Также допустимо частичное объявление:
#(11l)‘
(V row2, col) = get_row_column() // `col` уже объявлена выше, `row2` создаётся/объявляется в этой строке
’
или:
#(11l)‘
(row, V col2) = get_row_column() // `row` уже объявлена выше, `col2` создаётся/объявляется в этой строке
’

Чтобы объявить и назначить некоторое значение сразу нескольким переменным [[[одновременно]]] используйте такую запись ({на данный момент не поддерживается [{зачем тогда писать об этом здесь в документации? затем, чтобы при подготовке к [[[новой реализации [полноценном компиляторе]]]]реализации полноценного компилятора иметь представление обо всех требуемых фичах (включая те, которые транспайлер 11l → C++ не поддерживает)}]}):
#(11l)‘
V a = V b = 0
’

Для объявления константы используйте `-V`/`-var`:
#(11l)‘
-V constant_name = value
’
[{`-` с одной стороны означает постоянство (так обозначается постоянный ток), а с другой — противоположность[https://ru.wikipedia.org/wiki/Противоположное_число] (<не переменная\variable> есть <константа>).}]

Чтобы сократить количество ключевых слов `V`/`var`, можно использовать дополнительный scope. Например, такой код:
#(11l)‘
-V
   n_rows = 10
   n_cols = 10
   grid_size = n_rows * n_cols
   min_words = 25
’
эквивалентен такому:
#(11l)‘
-V n_rows = 10
-V n_cols = 10
-V grid_size = n_rows * n_cols
-V min_words = 25
’
