[[[Н‘Встроенные типы данных’
]]]Н‘Встроенные типы данных’


*‘Bool’
[[[https://metanit.com/cpp/tutorial/2.3.php <- google:‘типы данных’]]]Логический тип. Может принимать одно из двух значений: `0В` и `1В` {главная причина отказа от `true` и `false` — это то, что эти ключевые слова совсем не ложатся на [[[корневую/основообразующую]/]главную/]базовую[[[/основную]]] концепцию 11l — все корневые {например `L`\`Ц` — корневое ключевое слово, а `break`\`прервать` — ключевое подслово} ключевые слова языка могут быть записаны в одну букву {вариант взять например Y в качестве Yes/true и O в качестве nO/false/0 — ещё более уродливый, и к тому же, тогда язык пришлось бы назвать/‘переименовать в’ 13l}}. [По аналогии с ‘алгеброй логики’[https://ru.wikipedia.org/wiki/Алгебра_логики], в которой чаще используются {например, в таблицах истинности} логический ноль и логическая единица, а не истина/ложь {11l — не единственный язык программирования, в котором не используются традиционные `true` и `false` — например в PL/I используются `'0'B` и `'1'B`[[[https://rosettacode.org/wiki/Boolean_values#PL.2FI <- google:‘rosetta code boolean’ <- [https://rsdn.org/article/pl1/pl1.xml]:‘WHILE('1'B)’ <- google:‘К вопросу о совершенствовании языка программирования’ <- http://compiler.su/ob-isklyuchyonnyh-komandah-ili-za-chto-spisali-instruktsiyu-into.php#_6 <- http://compiler.su/priznaki-ustarevshego-yazyka.php]]], в Objective-C используется пара `YES`/`NO`, а в Scheme — `#t` и `#f`}.]

*‘Int’
Целочисленный тип (размерностью ‘32 или 64’[http://forum.11l-lang.org/threads/Размер-встроенного-типа-int.4/] разряда).

*‘Int8’
*‘Int16’
*‘Int32’
*‘Int64’
или[http://forum.11l-lang.org/threads/int8-int16-int32-int64-vs-int1-int2-int4-int8.6/]
*‘Int1’
*‘Int2’
*‘Int4’
*‘Int8’

*‘BigInt’
Целочисленный тип на основе длинной арифметики.

*‘Float’
Вещественный тип (размерностью ‘32 или 64’[http://forum.11l-lang.org/threads/Размер-встроенного-типа-float.5/] разряда).

*‘Float32’
*‘Float64’
или[http://forum.11l-lang.org/threads/int8-int16-int32-int64-vs-int1-int2-int4-int8.6/]
*‘Float4’
*‘Float8’

*‘Char’
Символ. Создать символ с кодом 65 можно так:
#(11l)‘
Char(code' 65)
’

*‘String’
Строка. Может быть сконструирована из ‘строковых литералов’[./../string-literals].
~‘Примечание: в отличие от Python строки в 11l являются изменяемыми (также как в C++).’

*‘Tuple’
Кортеж. Например, кортеж из двух элементов: #(11l)‘(1, 2)’. [Тип такого кортежа — `(Int, Int)` или `Tuple[Int, Int]`.]
К элементам кортежей, состоящих из от 2-х до 4-х элементов одного арифметического типа, можно обращаться по `x`, `y`, `z`, `w` или `r`, `g`, `b`, `a`.
Арифметические операции (`+`, `-`, `*`, `/`) над кортежами выполняются покомпонентно {например `(x1, y1, z1) + (x2, y2, z2)` даст следующий кортеж[[[ с компонентами]]]: `(x1 + x2, y1 + y2, z1 + z2)` {а `(x, y, z) * 2` даст `(x*2, y*2, z*2)`}}.
~‘Примечание 1: также как и ‘в mypy’[https://stackoverflow.com/a/52559625/2692494 <- google:‘mypy list any’], кортежи в 11l могут содержать элементы различных типов, но массивы (аналог списков в Python) могут содержать элементы только одного типа.
Примечание 2: в отличие от Python кортежи в 11l являются изменяемыми (также как в C++).’

*‘Array’
Массив. Например, массив из двух элементов: #(11l)‘[1, 2]’. [Тип такого массива — `[Int]` или `Array[Int]`.]

*‘Dict’
Словарь. Например, словарь из двух элементов: #(11l)‘[‘key1’ = 1, ‘key2’ = 2]’.
[Тип такого словаря — `[String = Int]` или `Dict[String, Int]`.]

*‘DefaultDict’
Словарь, не бросающий исключение при обращении к несуществующему элементу, а вставляющий новый элемент со значением по умолчанию в таком случае.
Например, словарь DefaultDict из двух элементов: #(11l)‘DefaultDict([‘key1’ = 1, ‘key2’ = 2])’.
[Тип такого словаря — `DefaultDict[String, Int]`.]

*‘Set’
Множество. Например, множество из двух элементов: #(11l)‘Set([1, 2])’. [Тип такого множества — `Set[Int]`.]

*‘Deque’
Двухсторонняя очередь. Например, очередь из двух элементов: #(11l)‘Deque([1, 2])’. [Тип такой очереди — `Deque[Int]`.]

*‘File’
Файл. Для открытия файла используйте конструктор:
*‘File’(name, mode = ‘r’)
Открывает файл с именем `name` и режимом `mode`.
~‘Примечание 1: только режимы ‘r’ и ‘w’ поддерживаются на данный момент [‘мои мысли на тему режимов открытия файлов’[./File]]’.
~‘Примечание 2: только кодировка UTF-8 [с опциональной меткой порядка байтов (BOM)] поддерживается на данный момент.’

[[‘’][[[Справка/]]]Документация по методам доступна на данный момент только ‘на английском’[./../../built-in-types].]
